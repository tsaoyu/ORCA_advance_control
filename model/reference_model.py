from __future__ import division
import numpy as np
from sympy import symbols, sin, cos, simplify, init_printing, poly,sinh
from sympy.matrices import Matrix, eye, zeros, ones, diag
from sympy.printing.cxxcode import cxxcode
import re


Ix, Iy, Iz = symbols('Ix Iy Iz')
m = symbols('m')
zG = symbols('zG')
Xu, Xuu, Yv, Yvv, Zw, Zww, Kp, Kpp, Mq, Mqq, Nr, Nrr = symbols('Xu Xuu Yv Yvv Zw Zww Kp Kpp Mq Mqq Nr Nrr')
Xudot, Yvdot, Zwdot, Kpdot, Mqdot, Nrdot = symbols('Xudot Yvdot Zwdot Kpdot Mqdot Nrdot')
B, W = symbols('B W')

x, y, z, phi, theta, psi = symbols('x y z phi theta psi')
u, v, w, p, q, r = symbols('u v w p q r')

X, Y, Z, yaw = symbols('X Y Z yaw')

allocation_matrix = Matrix([[-1,  1,  0,   1],
                              [-1, -1,  0,  -1],
                              [ 1,  1,  0,  -1],
                              [ 1, -1,  0,   1],
                              [ 0,  0, -1,   0],
                              [ 0,  0, -1,   0]])  

file_name = "generated_expression.txt"
f = open(file_name, 'w+') 

fit_param = [12.99468116,  4.0926301 , -1.94335654]

prop_matrix = Matrix(
                [[0.7071067811847431, 0.7071067811847433, -0.7071067811919605, -0.7071067811919607, 0.0, 0.0],
                [-0.7071067811883519, 0.7071067811883519, -0.7071067811811347, 0.7071067811811349, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0,  1.0000000000000002, 1.0000000000000002],
                [0.051265241635893875, -0.051265241635893875, 0.051265241635893875, -0.051265241635893875, 0.11050000000000003, -0.11050000000000003],
                [0.051265241635893875, 0.051265241635893875, -0.051265241635893875, -0.051265241635893875, 0.0024999999999744805, -0.0024999999999744805],
                [-0.166523646969496, 0.16652364696949604, 0.17500892834341342, -0.17500892834341347, 0.0, 0.0]])


allocated_command = (allocation_matrix * Matrix([X, Y, Z, yaw]))
t_intermediate = []

f.write('This file is automatically generated by reference_model.py. Do not modify by hand. \n \n')


f.write('Thruster intermediate variables: \n')
i = 1
for command in allocated_command:
    term = fit_param[0]* sinh(fit_param[1] * command) + fit_param[2]
    t_intermediate.append(term)
    f.write('t{} = '.format(i) + str(term) +  ';' + '\n')
    i += 1

f.write('\n')
f.write('Thruster force/moment variables: \n')

t1, t2, t3,t4, t5, t6 = symbols('t1 t2 t3 t4 t5 t6')
force = Matrix([t1, t2, t3,t4, t5, t6])

i = 1
for term in prop_matrix * force:
    f.write('f{} = '.format(i) + str(term) +  ';' + '\n')
    i += 1


nu = Matrix([x, y, z, phi, theta, psi])
f1, f2, f3, f4, f5, f6 = symbols('f1 f2 f3 f4 f5 f6')
tau = Matrix([f1, f2, f3, f4, f5, f6])


xG = 0
yG = 0

Ixy = 0
Ixz = 0
Iyx = 0

Iyz = 0
Izx = 0
Izy = 0


Mrb = Matrix([[m, 0, 0, 0, m * zG, -m * yG],
                [0, m, 0, -m * zG, 0, m * xG],
                [0, 0, m, m * yG, -m * xG, 0],
                [0, -m * zG, m * yG, Ix, -Ixy, -Ixz],
                [m * zG, 0, -m * xG, -Iyx, Iy, -Iyz],
                [-m * yG, m * xG, 0, -Izx, -Izy, Iz]])

Ma = diag(Xudot, Yvdot, Zwdot, Kpdot, Mqdot, Nrdot)

M = Mrb + Ma

inM = M.inv()

cpsi = cos(psi)
spsi = sin(psi)
cphi = cos(phi)
sphi = sin(phi)
cth = cos(theta)
sth = sin(theta)


Crb = Matrix([[0, 0, 0,  0, m * w, -m * v],
                [0, 0, 0, -m * w, 0, m * u],
                [0, 0, 0,  m * v, -m * u, 0],
                [0, m * w, -m * v, 0, Iz * r, -Iy * q],
                [-m * w, 0, m * u, -Iz * r, 0, Ix * p],
                [m * v, -m * u, 0, Iy * q, -Ix * p, 0]])

Ca = Matrix([[0, 0, 0, 0, - Zwdot * w, 0],
                [0, 0, 0, Zwdot * w, 0, -Xudot * u],
                [0, 0, 0, -Yvdot * v, Xudot * u, 0],
                [0, -Zwdot * w, Yvdot * v, 0, -Nrdot * r, Mqdot * q],
                [Zwdot * w, 0, -Xudot * u, Nrdot * r, 0, -Kpdot * p],
                [-Yvdot * v, Xudot * u, 0, -Mqdot * q, Kpdot * p, 0]])

Dnu = diag(Xu, Yv, Zw, Kp, Mq, Nr)
Dnl = diag(Xuu * abs(u), Yvv * abs(v), Zww * abs(w),
                Kpp * abs(p), Mqq * abs(q), Nrr * abs(r))


geta = Matrix([ (W - B) * sth,
        -(W - B) * cth * sphi,
        -(W - B) * cth * cphi,
        zG * W * cth * sphi,
        zG * W * sth,
        0])


nudot = (inM * (tau - (Crb + Ca)* nu  - (Dnu + Dnl) * nu - geta))


J = Matrix([[cpsi * cth, - spsi * cphi + cpsi * sth * sphi, spsi * sphi + cpsi * cphi * sth, 0, 0, 0],
            [spsi * cth, cpsi * cphi + sphi * sth * spsi, - cpsi * sphi + sth * spsi * cphi, 0, 0, 0],
            [-sth, cth * sphi, cth * cphi, 0, 0, 0],
            [0, 0, 0, 1, sphi * sth / cth, cphi * sth / cth],
            [0, 0, 0, 0, cphi, -sphi],
            [0, 0, 0, 0, sphi / cth, cphi / cth]])


etadot = simplify(J * nu)

cpsi, spsi, cphi, sphi, cth, sth= symbols('cpsi spsi cphi sphi cth sth')



geta = Matrix([ (W - B) * sth,
        -(W - B) * cth * sphi,
        -(W - B) * cth * cphi,
        zG * W * cth * sphi,
        zG * W * sth,
        0])


nudot = (inM * (tau - (Crb + Ca)* nu  - (Dnu + Dnl) * nu - geta))



J = Matrix([[cpsi * cth, - spsi * cphi + cpsi * sth * sphi, spsi * sphi + cpsi * cphi * sth, 0, 0, 0],
            [spsi * cth, cpsi * cphi + sphi * sth * spsi, - cpsi * sphi + sth * spsi * cphi, 0, 0, 0],
            [-sth, cth * sphi, cth * cphi, 0, 0, 0],
            [0, 0, 0, 1, sphi * sth / cth, cphi * sth / cth],
            [0, 0, 0, 0, cphi, -sphi],
            [0, 0, 0, 0, sphi / cth, cphi / cth]])


etadot = simplify(J * nu)

nudot = simplify(nudot)



f.write('\n')
f.write('Expression in C++11 flavour:\n')

f.write('\n')
f.write('Position derivatives: \n')

i = 0
for term in etadot:
    f.write('derivative({}) = '.format(i) + cxxcode(term) + ';' + '\n')
    i += 1 

f.write('\n')
f.write('Velocity derivatives: \n')

for term in nudot:
    f.write('derivative({}) = '.format(i) + cxxcode(term) + ';' + '\n')
    i += 1 

f.write('\n')
f.write('Intermediates to include: \n')
trig = {'cpsi': cos(psi),
        'spsi': sin(psi),
        'cphi': cos(phi),
        'sphi': sin(phi),
        'cth' :cos(theta),
        'sth' :sin(theta)}
for k, v in trig.items():
    f.write(str(k) + ' = '+ cxxcode(v)+ '\n')

f.write('\n')
f.write('Thruster intermediate variables: \n')
i = 1
for command in allocated_command:
    term = fit_param[0]* sinh(fit_param[1] * command) + fit_param[2]
    t_intermediate.append(term)
    f.write('t{} = '.format(i) + cxxcode(term, standard="c++11") + ';' + '\n')
    i += 1

def ct_subs(raw_content):

    raw_content = re.sub(r'cos\(', r'ct::core::tpl::TraitSelector<SCALAR>::Trait::cos(', raw_content)
    raw_content = re.sub(r'sin\(', r'ct::core::tpl::TraitSelector<SCALAR>::Trait::sin(', raw_content)
    raw_content = re.sub(r'cosh\(', r'ct::core::tpl::TraitSelector<SCALAR>::Trait::cos(', raw_content)
    raw_content = re.sub(r'sinh\(', r'ct::core::tpl::TraitSelector<SCALAR>::Trait::sinh(', raw_content)
    raw_content = re.sub(r'([a-zA-Z0-9]+)\*\*2', r'\1*\1', raw_content)
    raw_content = re.sub(r'Abs\(([a-zA-Z0-9]+)\)', r'ct::core::tpl::TraitSelector<SCALAR>::Trait::fabs(\1)', raw_content)
    raw_content = re.sub(r'\[', ' ', raw_content)
    raw_content = re.sub(r'\]', ' ', raw_content)
    raw_content = re.sub(r'matrix\(', ' ', raw_content)
    return raw_content

f.write('\n')
f.write('Expression in C++11 flavour for Control Toolbox:\n')

f.write('\n')
f.write('Position derivatives: \n')

i = 0
for term in etadot:
    f.write('derivative({}) = '.format(i) + ct_subs(str(term)) + ';' +  '\n')
    i += 1 

f.write('\n')
f.write('Velocity derivatives: \n')

for term in nudot:
    f.write('derivative({}) = '.format(i) + ct_subs(str(term)) + ';' + '\n')
    i += 1 



f.write('\n')
f.write('Intermediates to include: \n')
trig = {'cpsi': cos(psi),
        'spsi': sin(psi),
        'cphi': cos(phi),
        'sphi': sin(phi),
        'cth' :cos(theta),
        'sth' :sin(theta)}
for k, v in trig.items():
    f.write(str(k) + ' = '+ ct_subs(str(v)) + ';' +  '\n')

f.write('\n')
f.write('Thruster intermediate variables: \n')
i = 1
for command in allocated_command:
    term = fit_param[0]* sinh(fit_param[1] * command) + fit_param[2]
    t_intermediate.append(term)
    f.write('t{} = '.format(i) + ct_subs(str(term)) + ';' + '\n')
    i += 1




